// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: core/proto/game.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UniverseService_GetPlanets_FullMethodName          = "/proto.UniverseService/GetPlanets"
	UniverseService_GetNPCs_FullMethodName             = "/proto.UniverseService/GetNPCs"
	UniverseService_StreamUniverseState_FullMethodName = "/proto.UniverseService/StreamUniverseState"
)

// UniverseServiceClient is the client API for UniverseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniverseServiceClient interface {
	GetPlanets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlanetList, error)
	GetNPCs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NPCList, error)
	StreamUniverseState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientCommand, UniverseState], error)
}

type universeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUniverseServiceClient(cc grpc.ClientConnInterface) UniverseServiceClient {
	return &universeServiceClient{cc}
}

func (c *universeServiceClient) GetPlanets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlanetList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanetList)
	err := c.cc.Invoke(ctx, UniverseService_GetPlanets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeServiceClient) GetNPCs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NPCList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NPCList)
	err := c.cc.Invoke(ctx, UniverseService_GetNPCs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeServiceClient) StreamUniverseState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientCommand, UniverseState], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UniverseService_ServiceDesc.Streams[0], UniverseService_StreamUniverseState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientCommand, UniverseState]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UniverseService_StreamUniverseStateClient = grpc.BidiStreamingClient[ClientCommand, UniverseState]

// UniverseServiceServer is the server API for UniverseService service.
// All implementations must embed UnimplementedUniverseServiceServer
// for forward compatibility.
type UniverseServiceServer interface {
	GetPlanets(context.Context, *Empty) (*PlanetList, error)
	GetNPCs(context.Context, *Empty) (*NPCList, error)
	StreamUniverseState(grpc.BidiStreamingServer[ClientCommand, UniverseState]) error
	mustEmbedUnimplementedUniverseServiceServer()
}

// UnimplementedUniverseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUniverseServiceServer struct{}

func (UnimplementedUniverseServiceServer) GetPlanets(context.Context, *Empty) (*PlanetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanets not implemented")
}
func (UnimplementedUniverseServiceServer) GetNPCs(context.Context, *Empty) (*NPCList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNPCs not implemented")
}
func (UnimplementedUniverseServiceServer) StreamUniverseState(grpc.BidiStreamingServer[ClientCommand, UniverseState]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUniverseState not implemented")
}
func (UnimplementedUniverseServiceServer) mustEmbedUnimplementedUniverseServiceServer() {}
func (UnimplementedUniverseServiceServer) testEmbeddedByValue()                         {}

// UnsafeUniverseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniverseServiceServer will
// result in compilation errors.
type UnsafeUniverseServiceServer interface {
	mustEmbedUnimplementedUniverseServiceServer()
}

func RegisterUniverseServiceServer(s grpc.ServiceRegistrar, srv UniverseServiceServer) {
	// If the following call pancis, it indicates UnimplementedUniverseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UniverseService_ServiceDesc, srv)
}

func _UniverseService_GetPlanets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServiceServer).GetPlanets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniverseService_GetPlanets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServiceServer).GetPlanets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniverseService_GetNPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServiceServer).GetNPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniverseService_GetNPCs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServiceServer).GetNPCs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniverseService_StreamUniverseState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UniverseServiceServer).StreamUniverseState(&grpc.GenericServerStream[ClientCommand, UniverseState]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UniverseService_StreamUniverseStateServer = grpc.BidiStreamingServer[ClientCommand, UniverseState]

// UniverseService_ServiceDesc is the grpc.ServiceDesc for UniverseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniverseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UniverseService",
	HandlerType: (*UniverseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlanets",
			Handler:    _UniverseService_GetPlanets_Handler,
		},
		{
			MethodName: "GetNPCs",
			Handler:    _UniverseService_GetNPCs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUniverseState",
			Handler:       _UniverseService_StreamUniverseState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/proto/game.proto",
}
